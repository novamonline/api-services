#!/usr/bin/env php
<?php declare(strict_types=1);

$updating = in_array('update', $argv);
$resetting = in_array('--reset', $argv);
$building  = in_array('--build', $argv);

$action = $updating? 'updating': 'installing';
$tries = 0;

// system("export \$HOME=~");
if(in_array('--reset', $argv)){
    system('composer clearcache');
    print "Removed all ignored files...";
    system('git clean -fdX');
    print "Done!".PHP_EOL;

    print "Deleting all vendor packages...";
    system('rm -rf vendor');
    print "Done!".PHP_EOL;
}
print "Installing composer packages...".PHP_EOL;

BEGINNING:

if($updating){
    system('composer update --ansi --no-scripts');
} else {
    system('composer install --ansi --no-scripts');
}

if(!file_exists($env = '.env')){
    print "Creating .env file...";
    copy(__DIR__.'/.env.example', $env);
    print "Done!".PHP_EOL;
}

system('composer run-script post-autoload-dump');

if($autoload = realpath(__DIR__ . '/vendor/autoload.php')){
    require $autoload;
}

if(!$autoload && $tries < 3){
    $tries++;
    goto BEGINNING;
}
use Illuminate\Contracts\Console\Kernel;

$app = require __DIR__.'/bootstrap/app.php';
$artisan = $app->get(Kernel::class);


$artisan->call('optimize:clear');
$artisan->call('key:generate');

if(!file_exists('public/storage')){
    print "Creating storage link... ";
    $artisan->call('storage:link');
    print " Done!".PHP_EOL;
}

$database = "apiservicesdb";

$ENV = file_get_contents($env);
file_put_contents($env, preg_replace(
    "#(DB_DATABASE)=(.*?)(\s+)#msi",
    "$1=$database$3",
    $ENV
));

if($building){

    print "Running post $action command...".PHP_EOL;
    $artisan->call("run:schema --database --force --ansi");
    print $artisan->output();
    $artisan->call("run:schema --migrate --ansi");
    print $artisan->output();
    $artisan->call("run:seeders --all --ansi");
    print $artisan->output();
    $artisan->call("scribe:generate --force --ansi");
    print $artisan->output();
    print "...Done!".PHP_EOL;
}
exit;
